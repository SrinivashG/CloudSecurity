Here‚Äôs a concise summary focusing only on the compatibility between AWS ECR and Docker images üëá


---

üß© AWS ECR ‚Äì Docker Image Compatibility Highlights

1. Supported Image Formats

‚úÖ Docker Image Manifest Version 2, Schema 2

‚úÖ OCI Image Specification v1.0/v1.1 (Open Container Initiative)



2. Unsupported Format

‚ùå Docker Image Manifest Schema 1 ‚Äî not supported by ECR.



3. Registry Protocol

ECR supports the Docker Registry HTTP API V2 protocol.

Fully compatible with docker, podman, buildah, and kaniko push/pull operations.



4. Authentication

Use aws ecr get-login-password with Docker CLI:

aws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <account>.dkr.ecr.<region>.amazonaws.com



5. Manifest Validation

Check manifest format before push:

docker manifest inspect <image>

or

skopeo inspect docker://<image>



6. Multi-Architecture Support

ECR supports multi-arch manifests (e.g., ARM64, AMD64) compliant with Docker Schema 2 or OCI.



7. Remediation if Incompatible

Rebuild the image using Docker 20.x+ or BuildKit.

Convert Schema 1 ‚Üí Schema 2 using:

skopeo copy docker-daemon:oldimage:tag docker://<ecr-repo-url>:tag



8. Tooling Compatibility

Works seamlessly with:

Docker Engine ‚â• 1.10

BuildKit

Kaniko

Podman

Skopeo

AWS CodeBuild / Jenkins pipelines using Docker-in-Docker






---

Would you like me to make a 1-page PDF summary of just this compatibility section for quick reference?

Excellent ‚Äî this is a critical DevOps-level detail.
Here‚Äôs how to make Docker images compatible with AWS ECR if they are not currently supported (for example, Schema 1 or non-OCI compliant).


---

üß© How to Make Docker Images Compatible with AWS ECR

1. Identify the Image Format

Before you fix compatibility, confirm what type of image you have:

docker manifest inspect <image-name>:<tag>

or

skopeo inspect docker://<image-name>:<tag> | grep mediaType

Check the mediaType:

‚úÖ application/vnd.docker.distribution.manifest.v2+json ‚Üí Docker Schema 2 ‚úÖ

‚úÖ application/vnd.oci.image.manifest.v1+json ‚Üí OCI format ‚úÖ

‚ùå application/vnd.docker.distribution.manifest.v1+json ‚Üí Old Schema 1 ‚ùå


If Schema 1 ‚Üí must convert or rebuild before pushing to ECR.


---

2. Rebuild with a Modern Docker Engine

Rebuild the image using Docker 20.x+ or any modern builder that defaults to Schema 2 / OCI.

DOCKER_BUILDKIT=1 docker build -t <repo>:latest .

> üí° BuildKit automatically produces OCI-compliant manifests by default.




---

3. Convert Schema 1 to Schema 2 (without rebuild)

If rebuilding isn‚Äôt possible, use Skopeo or Crane to convert formats:

Using skopeo

skopeo copy docker://<old-image> docker://<account>.dkr.ecr.<region>.amazonaws.com/<repo>:<tag>

This copies and re-writes the manifest to Docker Schema 2 format.

Using crane

crane copy <old-image> <new-ecr-url>


---

4. Push the Converted/Rebuilt Image to ECR

Authenticate and push:

aws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <account>.dkr.ecr.<region>.amazonaws.com
docker tag <image>:latest <account>.dkr.ecr.<region>.amazonaws.com/<repo>:latest
docker push <account>.dkr.ecr.<region>.amazonaws.com/<repo>:latest


---

5. Validate After Push

Once pushed, confirm ECR accepted and stored it correctly:

aws ecr describe-images --repository-name <repo> --image-ids imageTag=latest

Or inspect:

skopeo inspect docker://<account>.dkr.ecr.<region>.amazonaws.com/<repo>:latest | grep mediaType

‚úÖ You should now see Docker Schema 2 or OCI v1.1.


---

6. Future-Proof Builds

Always use BuildKit or Kaniko for OCI compliance.

Add manifest validation in your CI/CD pipeline (e.g., Jenkins, GitHub Actions).

Document schema standards (OCI or Schema 2) in DevSecOps guidelines.

Use multi-arch buildx for ARM64/AMD64 compatibility:

docker buildx build --platform linux/amd64,linux/arm64 -t <repo>:multiarch --push .



---

‚úÖ Summary

Issue	Cause	Fix

Schema 1 manifest	Old Docker engine or registry	Rebuild or convert via skopeo/crane
OCI-incompatible tools	Using legacy build systems	Upgrade to Docker 20.x+ or BuildKit
Push errors to ECR	Wrong mediaType or auth	Re-authenticate, re-tag, use OCI format
Pull failures on EKS/ECS	Mismatched architecture	Build multi-arch manifests



---

Would you like me to generate this as a PDF ‚ÄúECR Compatibility Remediation Guide‚Äù (1 page quick reference)?

